<?php
/**
 * Filename class-edgenet-cat.php
 *
 * @package ussc
 * @author  Peter Toi <peter@petertoi.com>
 */

namespace USSC_Edgenet\Taxonomies;


use USSC_Edgenet\Template;

/**
 * Class Edgenet_Cat
 *
 * Summary
 *
 * @package USSC_Edgenet\Taxonomies
 * @author  Peter Toi <peter@petertoi.com>
 * @version 1.0.0
 */
class Edgenet_Cat {

	/**
	 * Taxonomy slug.
	 */
	const TAXONOMY = 'edgenet_cat';

	/**
	 * Rewrite slug.
	 */
	const REWRITE = 'edgenet';

	/**
	 * Taxonomy link meta if.
	 */
	const META_EDGENET_2_PRODUCT = 'edgenet_2_product';

	/**
	 * Tax we are syncing with
	 */
	const TARGET_TAX = 'product_cat';

	/**
	 * Edgenet_Cat constructor.
	 */
	public function __construct() {
		add_action( 'init', [ $this, 'register_document_type_taxonomy' ] );
		add_action( self::TAXONOMY . '_add_form_fields', [ $this, 'add_category_fields' ] );
		add_action( self::TAXONOMY . '_edit_form_fields', [ $this, 'edit_category_fields' ] );
		add_action( 'created_term', [ $this, 'save_category_fields' ], 10, 3 );
		add_action( 'edit_term', [ $this, 'save_category_fields' ], 10, 3 );
	}

	/**
	 * Register Doc_Type and link to Product.
	 */
	public function register_document_type_taxonomy() {
		register_taxonomy(
			self::TAXONOMY,
			'product',
			[
				'label'        => __( 'Edgenet Categories', 'ussc' ),
				'rewrite'      => [ 'slug' => self::REWRITE ],
				'hierarchical' => true,
			]
		);
	}

	/**
	 * Add WooCommerce Product Category checkboxes to edgenet_cat new term page.
	 */
	public function add_category_fields() {
		$data = [];

		$terms = get_categories( [
			'taxonomy'   => 'product_cat',
			'hide_empty' => false,
		] );

		$term_tree = $this->get_term_tree( 0, $terms );

		$data['checkboxes'] = $this->render_term_tree_checkboxes( $term_tree );

		Template::load( 'admin/edgenet-cat-meta-add', $data );
	}

	/**
	 * Add WooCommerce Product Category checkboxes to edgenet_cat edit term page.
	 *
	 * @param \WP_Term $term The term we're editing.
	 */
	public function edit_category_fields( $term ) {

		$data = [];

		$current = json_decode( get_term_meta( $term->term_id, self::META_EDGENET_2_PRODUCT, true ) );

		$data['term_id'] = absint( $_REQUEST['tag_ID'] );

		$terms = get_categories( [
			'taxonomy'   => 'product_cat',
			'hide_empty' => false,
		] );

		$term_tree = $this->get_term_tree( 0, $terms );

		$data['checkboxes'] = $this->render_term_tree_checkboxes( $term_tree, $current );

		Template::load( 'admin/edgenet-cat-meta-edit', $data );
	}

	/**
	 * save_category_fields function.
	 *
	 * @param mixed  $term_id Term ID being saved
	 * @param mixed  $tt_id
	 * @param string $taxonomy
	 */
	public function save_category_fields( $term_id, $tt_id = '', $taxonomy = '' ) {
		$safe_meta_vals = [];

		foreach ( $_POST[ self::META_EDGENET_2_PRODUCT ] as $val ) {
			$safe_meta_vals[] = absint( $val );
		}

		update_term_meta( $term_id, self::META_EDGENET_2_PRODUCT, wp_json_encode( $safe_meta_vals ) );

	}

	/**
	 * Convert flat list of terms into heirarchial array linked by parents.
	 *
	 * @param int        $parent     The Parent category ID.
	 * @param \WP_Term[] $categories The list of categories from get_categories().
	 *
	 * @return array
	 */
	public function get_term_tree( $parent, $categories ) {
		$result = array();
		foreach ( $categories as $category ) {
			if ( $parent === $category->category_parent ) {
				$category->children = $this->get_term_tree( $category->cat_ID, $categories );
				$result[]           = $category;
			}
		}

		return $result;
	}

	/**
	 * Convert flat list of terms into heirarchial array linked by parents.
	 *
	 * @param \WP_Term[] $tree     A multi-level tree generated by get_term_tree().
	 * @param array      $selected An array of selected term_ids.
	 * @param int        $level    The nesting level.
	 *
	 * @return string
	 */
	public function render_term_tree_checkboxes( $tree, $selected = [], $level = 0 ) {
		$result = '';

		if ( ! is_array( $tree ) ) {
			$tree = [ $tree ];
		}

		if ( empty( $selected ) ) {
			$selected = [];
		}

		foreach ( $tree as $branch ) {
			$checkbox = sprintf( '<div><label><input type="checkbox" name="%s[]" value="%d" %s>%s %s</label></div>',
				self::META_EDGENET_2_PRODUCT,
				$branch->term_id,
				( in_array( $branch->term_id, $selected, true ) )
					? 'checked'
					: '',
				str_pad( '', $level * 2, '- ', STR_PAD_LEFT ),
				$branch->name
			);

			$result .= $checkbox;

			if ( ! empty( $branch->children ) ) {
				foreach ( $branch->children as $tree ) {
					$level ++;
					$result .= $this->render_term_tree_checkboxes( $tree, $selected, $level );
					$level --;
				}
			}
		}

		return $result;
	}
}
